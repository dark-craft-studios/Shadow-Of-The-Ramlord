#include "AmnesiaSignatures.cpp"
#include "AmnesiaExtensions.ihps"
#include "Utilities.ihps"
#include "EveryMapEvents_AUTORUN.ihps"
#include "ForceEssentialItems_AUTORUN.ihps"
#include "Meditation.ihps"

// ============================================================================
// CONSTANTS
// ============================================================================
const string graveyardDoor = "mansion_1";

// ============================================================================
// MAIN
// ============================================================================
const string gMapId = "04";

void OnStart()
{
    GetGlobalLoadingScreen("03");
    RegisterCallbacks();
    StartAmbience("ambience_hollow_tinker.snt");
    FadeOut(0.0f);
    PlayMusic("11_paper_howl.ogg");
    AddTimer("", 0.5f, "OnMapEnterVoiceover");
    //FadeIn(0.1f);
    //AddTimer("", 5.0f, "DEBUG");
}

void OnEnter()
{
    PlayMusic("SOTR_overlook.ogg", false, 0.5f, 0.5f, 1.0f, false);
    PreloadSound("ambience_hollow_tinker.snt");
}

void RegisterCallbacks()
{
    for(int i = 1; i <= brBookCount; i++)
    {
        AddUseItemCallback(
            "",                 /* Name */
            brBookItemBase + i, /* Item Name */
            brRitualArea,       /* Entity */
            "PlaceRitualBook",  /* Callback Function */
            true                /* Destroy Item */
        );
    }

    AddSinglePlayerCollideCallback(
        "EmiliaConvoArea", 
        "DoorConversation"
    );
    AddSinglePlayerCollideCallback(
        "MonsterSequenceBegin", 
        "BeginMonsterSequence"
    );
    AddSinglePlayerCollideCallback(
        "EndingSequenceArea", 
        "EndingLine1"
    );
    AddSinglePlayerCollideCallback(
        "TombminderArea", 
        "LookAtFirstTomb"
    );
    AddRepeatedPlayerCollideCallback(
        "EnsureFirstTombArea",
        "EnsureFirstTombPickup"
    );

    AddEntitySingleCollideCallback(
        "StairsDoor_1", 
        "SuitorDoorEventArea", 
        "SuitorDoorEvent"
    );

    AddUseItemCallback(
        "SOTR_Clearsight_1",
        "MeditationArea_2",
        "OnGraveInteract"
    );
}

// ============================================================================
// VOICE ACTING
// ============================================================================
void DoorConversation(string a, string b, int state)
{
    PlaySoundAtEntity("scare_wood_creak_scuf.snt", "EmiliasFeet");
    StartPlayerLookAt(
        "EmiliaSource",  /* Entity */
        1.0f,            /* Multiplier */
        1.5f,            /* Max speed */
        ""               /* Callback */
    );

    SetPlayerActive(false);
    PlayVoiceOnEntityAndSlowdown("OL_Emilia_3.ogg", "EmiliaSource");
    PlayVoiceOnEntityAndSlowdown("OL_Emilia_4.ogg", "EmiliaSource");
    SetEffectVoiceOverCallback("DoorConversationEnd");
    SetPropStaticPhysics("StairsDoor_1", false);
}

void DoorConversationEnd()
{
    // NOTE(Peter): How about a sound of her walking to
    // a chair and sitting down?
    PlaySoundAtEntity("scare_wood_creak_scuf.snt", "EmiliasFeet");
    PlayVoiceOnPlayerAndSlowdown("OL_Johan_3.ogg");

    ResetPlayerState();
}

// ============================================================================
// MONSTER SEQUENCE INITIALIZE
// ============================================================================
void BeginMonsterSequence(string a, string b, int state)
{
        PlayVoiceOnPlayer(
            "OL_Johan_6.ogg", 
            "JohanNarration", 
            "28"
        );
}

// ============================================================================
// ENDING SEQUENCE - AUDIO
// ============================================================================
void EndingLine1(string a, string b, int state)
{
    PlayVoiceOnPlayerAndSlowdown("OL_Johan_8.ogg");
    SetPropStaticPhysics(graveyardDoor, true);
    SetEffectVoiceOverCallback("UnlockGraveyard");
}

void UnlockGraveyard()
{
    ResetPlayerState();
    SetPropStaticPhysics(graveyardDoor, false);
}

// ============================================================================
// BOOK RITUAL
// ============================================================================
const int    brBookCount        = 3;
const string brBookItemBase     = "RitualBook_";
const string brBookStaticBase   = "RitualBookStatic_";
const string brRitualArea       = "RitualBookArea";

void PlaceRitualBook(string item, string entity)
{
    RemoveItem(item);

    AddLocalVarInt("brPlacedBooks", 1);
    int currentBookNumber = GetLocalVarInt("brPlacedBooks"); 
    SetEntityActive(brBookStaticBase + currentBookNumber, true);
    CheckRitualCompletion();
}

void CheckRitualCompletion()
{
    if(GetLocalVarInt("brPlacedBooks") < brBookCount) return;
    OnRitualCompleted();
}

void OnRitualBookPickup(string entity)
{
    AddLocalVarInt("brPickedBooks", 1);
    int currentBookNumber = GetLocalVarInt("brPickedBooks");

    if(currentBookNumber == 1)
    {
        OnFirstBookPickup();
    }
    else if(currentBookNumber == brBookCount)
    {
        OnLastBookPickup();
    }
}

void OnRitualCompleted()
{
    StartRitualCutscene();
}

// ============================================================================
// AFTER-RITUAL CUTSCENE
// ============================================================================
const string[] arcLampsToGoOut = {
    "candle_1",
    "candle_2",
    "candle_3",
    "candle_4",
    "candle_5",
    "candle_6",
    "candle_7",
    "candle_8",
    "candle_9",
    "candle_10",
    "candle_11",
    "candle_12",
    "candle_13",
    "candle_14"
};

const string[] arcLightsToGoOut = {
    "PointLight_1",
    "CandleBillboardLight"
};

const string arcDoorToPush = "EmiliaDoor";

void StartRitualCutscene() { RitualScare(); }

// <DEBUG>

void DEBUG(string t)
{
    RitualScare();
}

// </DEBUG>


void RitualScare(string t)
{
    int stage = GetLocalVarInt("RitualScare");
    AddLocalVarInt("RitualScare", 1);
    float delay = 0.0f;

    if(stage == 0)
    {
        SetPlayerActive(false);
        StartPlayerLookAtNormal("RitualBookArea");
        delay = 2.0f;
    }
    else if(stage == 1)
    {
        StopAmbience();
        FadeOutMusic(0.5f);
        FadeRadialBlurTo(0.015f, 1.0f);
        FadePlayerFOVMulTo(0.1f, 0.05f);
        delay = 6.0f;
    }
    else if(stage == 2)
    {
        PlaySoundAtEntity("19_breath.snt");
        delay = 4.0f;
    }
    else if(stage == 3)
    {
       PlaySoundAtEntity("react_breath_slow.snt");
       delay = 1.0f;
    }
    else if(stage == 4)
    {
        PlaySoundAtEntity("chains_monster_man_run_soft.snt", "ChainArea_2");
        PlayVoiceOnPlayerAndSlowdown("OL_Johan_4.ogg");
        SetEffectVoiceOverCallback("RitualScare");
        return;
    }
    else if(stage == 5)
    {
        PlaySoundAtEntity("chains_monster_man_run_soft.snt", "ChainArea_4");
        delay = 0.4f;
    }
    else if(stage == 6)
    {
        OnRitualVoiceDone();
    }
    else
    {
        return;
    }

    AddTimer("", delay, "RitualScare");
}

void RitualScare() { RitualScare(""); }

void OnRitualVoiceDone()
{
    ResetPlayerState();
    GiveSanityDamage(1.0f, true);
    PlayGuiSound("15_event_prisoner.ogg", 1.0f);
    FadePlayerFOVMulTo(1.0f, 0.75f);
    FadeRadialBlurTo(0.0f, 0.5f);

    for(uint i = 0; i < arcLampsToGoOut.length(); i++)
    {
        SetLampLit(
            arcLampsToGoOut[i], /* Lamp */
            false,              /* Lit */
            true                /* Use Effects */
        );
    }

    for(uint i = 0; i < arcLightsToGoOut.length(); i++)
    {
        FadeLightTo(
            arcLightsToGoOut[i],    /* Light */
            0.0f,                   /* Red */
            0.0f,                   /* Green */
            0.0f,                   /* Blue */
            1.0f,                   /* Alpha */
            -1.0f,                  /* Radius (-1 = same as previous) */
            0.5f                    /* TimeInSeconds */
        );
    }

    SetPropStaticPhysics(arcDoorToPush, false);
    SetPropHealth(arcDoorToPush, 0.0f);
}

// ============================================================================
// VOICEOVER LINES
// ============================================================================
void OnMapEnterVoiceover(string t)
{
    FadeIn(3.0f);
    PlayVoiceOnPlayerAndSlowdown("OL_Johan_1.ogg");
    SetPlayerMoveSpeedMul(0.1f);
    StartPlayerLookAt("StatueFaceArea", 0.5f, 0.6f, "");
    SetEffectVoiceOverCallback("ResetPlayerState");
    AddTimer("", 5.0f, "BasementCreaks");
}

void BasementCreaks(string t)
{
    int stage = GetLocalVarInt("BasementCreaks");
    AddLocalVarInt("BasementCreaks", 1);
    float delay = 0.0f;

    if(stage == 0)
    {
        PlaySoundAtEntity("scare_wood_creak_scuf.snt", "BigFeetArea_1");
        CreateParticleSystemAtEntityWithAlpha(
            "ps_dust_falling_big_feet.ps", 
            "BigFeetArea_1", 
            0.25f
        );
        delay = 4.0f;
    }
    else if(stage == 1)
    {
        PlaySoundAtEntity("scare_wood_creak_walk.snt", "BigFeetArea_2");
        CreateParticleSystemAtEntityWithAlpha(
            "ps_dust_falling_big_feet.ps", 
            "BigFeetArea_2", 
            0.25f
        );
        StartPlayerLookAt("BigFeetArea_2", 0.5f, 0.6f, "");
        delay = 2.0f;
    }
    else if(stage == 2)
    {
        StartPlayerLookAt("RitualBookArea", 0.5f, 0.6f, "");
    }
    else
    {
        return;
    }

    AddTimer("", delay, "BasementCreaks");
}

void LookAtFirstTomb(string a, string b, int s)
{
    StartPlayerLookAt("RitualBook_1", 0.8f, 1.5f, "");
    AddTimer("", 1.5f, "ResetPlayerStateTimer");
}

void EnsureFirstTombPickup(string a, string b, int s)
{
    if(s == CollisionState::onlyEnter)
    {

        AddDebugMessage("Checking for first tomb", false);
        if(GetLocalVarInt("FirstTombPickedUp") != 1)
        {
            SetSwingDoorClosed("StorageDoor_1", true, false);
            SetSwingDoorLocked("StorageDoor_1", true, false);
            SetPropStaticPhysics("StorageDoor_1", true);
            StartPlayerLookAt("RitualBook_1", 0.8f, 1.5f, "");
        }
        else
        {
            SetSwingDoorLocked("StorageDoor_1", false, false);
            SetPropStaticPhysics("StorageDoor_1", false);
            SetEntityActive("EnsureFirstTombArea", false);
        }
    }
    else
    {
        ResetPlayerState();
    }
}

void OnFirstBookPickup()
{
    SetLocalVarInt("FirstTombPickedUp", 1);
    RitualBookPickupScene();
}

const float rbSpotR = 1.0f;
const float rbSpotG = 0.62f;
const float rbSpotB = 0.017f;

const float rbPointR = 0.31f;
const float rbPointG = 0.0f;
const float rbPointB = 0.0f;

void RitualBookPickupScene(string t)
{
    int stage = GetLocalVarInt("RitualBookPickupScene");
    AddLocalVarInt("RitualBookPickupScene", 1);
    float delay = 0.0f;

    if(stage == 0)
    {
        SetEntityActive("RitualBook_1_Static", true);
        SetPlayerActive(false);
        StartPlayerLookAt("RitualBook_1_Static", 1.0f, 1.5f, "");
        // TODO (Peter) : Comment FadeLightTo
        FadeLightTo(
            "rbSpot", 
            rbSpotR, 
            rbSpotG, 
            rbSpotB, 
            1.0f, 
            -1.0f, 
            0.5f
        );
        FadeLightTo(
            "rbPoint", 
            rbPointR, 
            rbPointG, 
            rbPointB, 
            1.0f, 
            -1.0f, 
            0.5f
        );
        FadeRadialBlurTo(0.015f, 1.0f);
        FadePlayerFOVMulTo(0.1f, 0.05f);
        PlayVoiceOnPlayerAndSlowdown("OL_Johan_5.ogg");
        SetEffectVoiceOverCallback("RitualBookPickupScene");
        return;
    }
    else if(stage == 1)
    {
        FadeLightTo("rbSpot", 0.0f, 0.0f, 0.0f, 1.0f, -1.0f, 0.5f);
        FadeLightTo("rbPoint", 0.0f, 0.0f, 0.0f, 1.0f, -1.0f, 0.5f);
        FadePlayerFOVMulTo(1.0f, 0.75f);
        FadeRadialBlurTo(0.0f, 0.5f);
        SetPropActiveAndFade("RitualBook_1_Static", false, 0.5f);
        delay = 1.0f;
    }
    else if(stage == 2)
    {
        ResetPlayerState();
    }
    else
    {
        return;
    }

    AddTimer("", delay, "RitualBookPickupScene");
}

void RitualBookPickupScene()
{
    RitualBookPickupScene("");
}

void OnLastBookPickup()
{
    PlayVoiceOnPlayerAndSlowdown("OL_Johan_7.ogg");
}

void OnBasementDoorInteract(string t)
{
    if(GetLocalVarInt("EmiliaIntroDone") == 1) { return; }

    int stage = GetLocalVarInt("OnBasementDoorInteract");
    AddLocalVarInt("OnBasementDoorInteract", 1);
    float delay = 0.0f;

    if(stage == 0)
    {
        PlaySoundAtEntity("09_wind_whirl.snt", "RosePetalsWindArea");
        CreateParticleSystemAtEntity(
            "ps_rose_petals_wind.ps", 
            "RosePetalsWindArea"
        );
        CreateParticleSystemAtEntity(
            "ps_dust_push.ps", 
            "DustPushArea"
        );
        SetLightFlickerActive("BasementLight", true);
        delay = 2.0f;
    }
    else if(stage == 1)
    {
        SetLightFlickerActive("BasementLight", false);
        PlayVoiceOnEntityAndSlowdown("OL_Emilia_1.ogg", "EmiliaSource");
        SetEffectVoiceOverCallback("OnBasementDoorInteract");
        return;
    }
    else if(stage == 2)
    {
        PlayVoiceOnPlayerAndSlowdown("OL_Johan_2.ogg");
        SetEffectVoiceOverCallback("OnBasementDoorInteract");
        return;
    }
    else if(stage == 3)
    {
        EmiliaMakeFewSteps("");
        StartPlayerLookAt("EmiliaSource", 0.8f, 1.5f, "");
        PlayVoiceOnEntityAndSlowdown("OL_Emilia_2.ogg", "EmiliaSource");
        SetEffectVoiceOverCallback("OnBasementDoorInteract");
        return;
    }
    else if(stage == 4)
    {
        StopPlayerLookAt();
    }
    else
    {
        SetLocalVarInt("EmiliaIntroDone", 1);
        return;
    }

    AddTimer("", delay, "OnBasementDoorInteract");
}

void OnBasementDoorInteract()
{
    OnBasementDoorInteract("");
}

void EmiliaMakeFewSteps(string t)
{
    int stage = GetLocalVarInt("EmiliaMakeFewSteps");
    AddLocalVarInt("EmiliaMakeFewSteps", 1);
    float delay = 0.0f;

    PlaySoundAtEntity("step_walk_female_wood.snt", "EmiliasFeet");
    delay = RandFloat(0.7f, 0.8f);

    if(stage > 2) { return; }

    AddTimer("", delay, "EmiliaMakeFewSteps");
}

// ============================================================================
// MONSTER SHUT DOOR EVENT
// ============================================================================
void SuitorDoorEvent(string a, string b, int s)
{
    GiveSanityDamageSmall();
    PlayStepRunSounds();
}

void PlayStepRunSounds(string t)
{
    int stage = GetLocalVarInt("PlayStepRunSounds");
    AddLocalVarInt("PlayStepRunSounds", 1);
    float delay = 0.0f;

    if(stage < 8)
    {
        PlaySoundAtEntity("chains_monster_man_run_soft.snt", "Step_" + stage);
        delay = RandFloat(0.3f, 0.6f);
    }
    else
    {
        return;
    }

    AddTimer("", delay, "PlayStepRunSounds");
}

void PlayStepRunSounds() { PlayStepRunSounds(""); }

// ============================================================================
// FINAL MEDITATION
// ============================================================================
void OnGraveInteract(string item, string entity)
{
    StartMeditation(entity, "OnGraveMeditation");
    RemoveItem(item);
}

void OnGraveMeditation(string t)
{
    int stage = GetLocalVarInt("OnGraveMeditation");
    AddLocalVarInt("OnGraveMeditation", 1);
    float delay = 0.0f;

    if(stage == 0)
    {
        PlayVoiceOnPlayer(
            "OL_Johan_9.ogg", 
            "JohanNarration", 
            "31"
        );
        SetEffectVoiceOverCallback("OnGraveMeditation");
        return;

        delay = 1.0f;
    }
    else if(stage == 1)
    {
        ChangeMap("SOTR_04_emiliasdream.map");
    }
    else
    {
        return;
    }

    AddTimer("", delay, "OnGraveMeditation");
}

void OnGraveMeditation()
{
    OnGraveMeditation("");
}