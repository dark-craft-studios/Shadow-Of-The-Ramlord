#include "AmnesiaSignatures.cpp"
#include "AmnesiaExtensions.ihps"
#include "Utilities.ihps"
#include "EveryMapEvents_AUTORUN.ihps"
#include "ForceEssentialItems_AUTORUN.ihps"
#include "Meditation.ihps"

// ============================================================================
// USED ENTITIES
// Constants representing entities referenced inside this script
// in order to prevent misspelling and allow for easier renaming.
// - For consistency use an "ent" prefix.
// ============================================================================
const string entEntranceGate = "elevator_door_1";
const string entGateCandle1 = "candlestick_floor_1";
const string entGateCandle2 = "candlestick_floor_2";
const string entCellarDoor = "level_celler_1";
const string entClearsightDoor = "ClearsightDoor1";
const string entBallroomLevelDoor = "level_wood_1";

const string ambOutside = "ambience_wind_eerie_no3d.snt";

// ============================================================================
// MAIN
// ============================================================================
void OnStart()
{
    GetGlobalLoadingScreen("01");
    FadeOut(0.0f);
    FadeIn(3.0f);
    PlayMusicOnce("11_paper_howl.ogg");
    StartAmbience(ambOutside);
    RegisterCallbacks();    
}

void OnLeave()
{
    StopAmbience();
}

void RegisterCallbacks()
{
    AddSinglePlayerCollideCallback("MoodScript1", "GateOpenEvent");
    AddSinglePlayerCollideCallback("JohanVoice_1", "JohanInitialLine");
    AddSinglePlayerCollideCallback("JohanVoice_2", "JohanGateLine");
    AddSinglePlayerCollideCallback("JohanVoice_4", "JohanAltarLine");
    AddSinglePlayerCollideCallback("TidyUp", "AntonAndEmiliaEvent");

    AddUseItemCallback("SOTR_Clearsight_1", "ClearsightAbility", "Meditate");
}

// ============================================================================
// GATE EVENT
// ============================================================================
void GateOpenEvent(string a, string b, int state)
{
    AddPropForce(entEntranceGate, 0, 0, -200, "World");
    PlaySoundAtEntity("SOTR_NecroWind.snt");
    LightLampWithEffects(entGateCandle2);
    LightLampWithEffects(entGateCandle1);
}

// ============================================================================
// JOHAN NARRATION EVENTS
// ============================================================================
void JohanInitialLine(string a, string b, int state)
{
    PlayVoiceOnPlayerAndSlowdown("PR_Johan_1.ogg");
}

void JohanGateLine(string a, string b, int state)
{
    PlayVoiceOnPlayerAndSlowdown("PR_Johan_2.ogg");
}

void JohanAltarLine(string &in asParent, string &in asChild, int alState)
{
    AltarMiniCutscene("");

    PlayVoiceOnPlayerAndSlowdown("PR_Johan_4.ogg");
}

// ============================================================================
// ALTAR MINI CUTSCENE
// ============================================================================
void AltarMiniCutscene(string t)
{
    int stage = GetLocalVarInt("AltarMiniCutscene");
    AddLocalVarInt("AltarMiniCutscene", 1);
    float delay = 0.0f;

    if(stage == 0)
    {
        SetPlayerActive(false);
        StartPlayerLookAt("ClearsightAbility", 1.0f, 1.5f, "");
        FadePlayerFOVMulTo(0.7f, 1.0f);
        delay = 16.0f;
    }
    else if(stage == 1)
    {
        FadePlayerFOVMulTo(1.0f, 1.0f);
        StopPlayerLookAt();
        delay = 2.0f;
    }
    else
    {
        SetPlayerActive(true);
        return;
    }

    AddTimer("", delay, "AltarMiniCutscene");
}


// ============================================================================
// MEDITATION
// ============================================================================
void Meditate(string item, string entity)
{
    SetEntityActive("JohanVoice_3", false);
    PlayVoiceOnPlayerAndSlowdown("PR_Johan_5.ogg");
    SetEntityActive("TidyUp", true);
    SetSwingDoorLocked(entClearsightDoor, false, true);
    SetEntityActive("JohanVoice_3", false);
    SetLevelDoorLocked("level_celler_2", false);
    StartMeditation(entity, "OnMeditating");
}

void OnMeditating(string t)
{
    AddTimer("", 1.0f, "EndMeditation");
}

// ============================================================================
// ANTON AND EMILIA EVENT
// ============================================================================
void AntonAndEmiliaEvent(string a, string b, int state)
{
    SetSwingDoorClosed(entEntranceGate, true, true);
    SetSwingDoorLocked(entEntranceGate, true, true);
    SetLevelDoorLocked(entCellarDoor, true);
    SetSwingDoorClosed(entClearsightDoor, false, true);

    AntonAndEmiliaCutscene("");
}

void AntonAndEmiliaCutscene(string t)
{
    int stage = GetLocalVarInt("AntonAndEmiliaCutscene");
    AddLocalVarInt("AntonAndEmiliaCutscene", 1);
    float delay = 0.0f;

    if(stage == 0)
    {
        SetLevelDoorLocked(entBallroomLevelDoor, true);
        SetLevelDoorLockedText(entBallroomLevelDoor, "DoorMessages", "PrologueBallroomLevelDoorLocked");
        FadeSepiaColorTo(0.9f, 2.0f);
        FadeRadialBlurTo(0.025f, 2.0f);
        delay = 2.5f;
    }
    else if(stage == 1)
    {
        PlayVoiceOnPlayerAndSlowdown("PR_Anton_1.ogg");
        PlayVoiceOnPlayerAndSlowdown("PR_Emilia_1.ogg");
        PlayVoiceOnPlayerAndSlowdown("PR_Anton_2.ogg");
        PlayVoiceOnPlayerAndSlowdown("PR_Emilia_2.ogg");
        PlayVoiceOnPlayerAndSlowdown("PR_Anton_3.ogg");
        SetEffectVoiceOverCallback("AntonAndEmiliaVoiceLoop");
        return;
    }
    else
    {
        FadeSepiaColorTo(0.0f, 2.0f);
        FadeRadialBlurTo(0.0f, 2.0f);
        ResetPlayerState();
        SetLevelDoorLocked(entBallroomLevelDoor, false);
        return;
    }

    AddTimer("", delay, "AntonAndEmiliaCutscene");
}

void AntonAndEmiliaVoiceLoop() { AntonAndEmiliaCutscene(""); }

// ============================================================================
// DOOR INTERACTIONS
// ============================================================================
void OnMainDoorInteract(string entity)
{
    SetMessage("DoorMessages", "PrologueMainLocked", 0.0f);
    PlaySoundAtEntity("door_level_wood_locked.snt");
}

void OnLockDoorInteract(string entity)
{
    SetMessage("DoorMessages", "Generic_Locked_4", 0.0f);
    PlaySoundAtEntity("door_level_wood_locked.snt");
}

void PrologueSecondLocked(string entity)
{
    if(!GetSwingDoorLocked(entity)) { return; }
    SetMessage("DoorMessages", "PrologueSecondLocked", 0.0f);
    if(GetLocalVarInt("CommentedOnLockedDoor") == 0)
    {
        SetLocalVarInt("CommentedOnLockedDoor", 1);
        PlayVoiceOnPlayerAndSlowdown("PR_Johan_3.ogg");
    }
}

void ExitShed(string entity)
{
    StopAmbience(0.5f);
    StartAmbience(ambOutside);
}
