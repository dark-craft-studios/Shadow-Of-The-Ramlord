#include "AmnesiaSignatures.cpp"
#include "ResetPlayerStateOnStart.ihps"
#include "AmnesiaSignatures.cpp"
#include "AmnesiaExtensions.ihps"
#include "Utilities.ihps"
#include "EveryMapEvents_AUTORUN.ihps"
#include "ForceEssentialItems_AUTORUN.ihps"

// ============================================================================
// USED ENTITIES
// Constants representing entities referenced inside this script
// in order to prevent misspelling and allow for easier renaming.
// - For consistency use an "ent" prefix.
// ============================================================================
const string entRisenSalt           = "RisenSalt";
const string entRisenWater          = "RisenWater";

// ----------------------------------------------------------------------------
// Main - g
// ----------------------------------------------------------------------------
const string gMapId = "10";

void OnStart()
{
    FadeOut(0.0f);
    StopPlayerLookAt();
    TortureDialog();
    SetPlayerMoveSpeedMul(0.0f);
    SetPlayerRunSpeedMul(0.0f);
    BlockAllVanillaHints();
    RegisterCallbacks();
    PreloadSound("step_walk_rock.snt");
}

void OnLeave()
{
}

void RegisterCallbacks()
{
    AddSinglePlayerCollideCallback("JohanLineArea", "StartDialog");
    AddSinglePlayerCollideCallback("PrioryLineArea", "StartPriory");
    AddSinglePlayerCollideCallback("LeftHandPathArea", "StartHorror");
}


// ----------------------------------------------------------------------------
// Cutscene Dialog
// ----------------------------------------------------------------------------

void TortureDialog(string t)
{
    int stage = GetLocalVarInt("TortureDialog");
    AddLocalVarInt("TortureDialog", 1);
    float delay = 0.0f;

    if(stage == 0)
    {
        TeleportPlayer("PlayerStartArea_2");
        SetPlayerActive(false);
        StartPlayerLookAt("LookAtArea1", 0.8f, 1.5f, "");
        delay = 2.0f;
    }
    else if(stage == 1)
    {
        FadeIn(5.0f);
        delay = 3.0f;
    }
    else if(stage == 2)
    {
        PlayVoiceOnPlayer(
            "RC_Johan_2.ogg", 
            "JohanNarration", 
            "33"
        );
        SetEffectVoiceOverCallback("TortureDialog");
        return;
    }
    else if(stage == 3)
    {
        delay = 3.0f;
    }
    else if(stage == 4)
    {
    SetMoveObjectStateExt("castle_portcullis_1", 1.0f, 0.8f, 1.0f, 0.5f, false);
        delay = 8.0f;
    }
    else if(stage == 5)
    {
        PlaySoundAtEntity("", "step_walk_rock.snt", "Footstep_1", 0.1f, false);
        delay = 1.5f;
    }
    else if(stage == 6)
    {
        PlaySoundAtEntity("", "step_walk_rock.snt", "Footstep_2", 0.1f, false);
        delay = 1.5f;
    }
    else if(stage == 7)
    {
        PlaySoundAtEntity("", "step_walk_rock.snt", "Footstep_3", 0.1f, false);
        delay = 1.5f;
    }
    else if(stage == 8)
    {
        PlaySoundAtEntity("", "step_walk_rock.snt", "Footstep_4", 0.1f, false);
        delay = 1.5f;
    }
    else if(stage == 9)
    {
        PlaySoundAtEntity("", "step_walk_rock.snt", "Footstep_5", 0.1f, false);
        delay = 4.5f;
    }
    else if(stage == 10)
    {
        PlayVoiceOnPlayer(
            "RC_Anton_1.ogg", 
            "AntonNarration", 
            "8"
        );
        SetEffectVoiceOverCallback("TortureDialog");
        return;
    }
    else if(stage == 11)
    {
        delay = 2.0f;
    }
    else if(stage == 12)
    {
        PlayVoiceOnPlayer(
            "RC_Anton_2.ogg", 
            "AntonNarration", 
            "9"
        );
        SetEffectVoiceOverCallback("TortureDialog");
        return;
    }
    else if(stage == 13)
    {
        delay = 2.0f;
    }
    else if(stage == 14)
    {
        PlayVoiceOnPlayer(
            "RC_Anton_3.ogg", 
            "AntonNarration", 
            "10"
        );
        SetEffectVoiceOverCallback("TortureDialog");
        return;
    }
    else if(stage == 15)
    {
        ///ROOM FOR SLASHING SOUND/IMPACT
        SetPlayerHealth(25.0f);
        delay = 2.0f;
    }
    else if(stage == 16)
    {
        PlayVoiceOnPlayer(
            "RC_Johan_3.ogg", 
            "JohanNarration", 
            "34"
        );
        SetEffectVoiceOverCallback("TortureDialog");
        return;
    }
    else if(stage == 17)
    {
        delay = 2.0f;
    }
    else if(stage == 18)
    {
        PlayVoiceOnPlayer(
            "RC_Anton_4.ogg", 
            "AntonNarration", 
            "11"
        );
        SetEffectVoiceOverCallback("TortureDialog");
        return;
    }
    else if(stage == 19)
    {
        ///FURTHER STAB SOUND
        FadeOut(3.0f);
        delay = 4.0f;
    }
    else if(stage == 20)
    {
        SetPlayerHealth(100.0f);
        TeleportPlayer("PlayerStartArea_1");
        WakeUpDialog();
        delay = 2.0f;
    }
    else
    {
        return;
    }
    AddTimer("", delay, "TortureDialog");
}

void TortureDialog()
{
    StopPlayerLookAt();
    TortureDialog("");
}

// ----------------------------------------------------------------------------
// After-Cutscene Dialog
// ----------------------------------------------------------------------------

void WakeUpDialog(string t)
{
    int stage = GetLocalVarInt("WakeUpDialog");
    AddLocalVarInt("WakeUpDialog", 1);
    float delay = 0.0f;

    if(stage == 0)
    {
        FadeIn(8.0f);
        delay = 5.0f;
    }
    else if(stage == 1)
    {
        PlayVoiceOnPlayer(
            "RC_Johan_4.ogg", 
            "JohanNarration", 
            "35"
        );
        SetEffectVoiceOverCallback("WakeUpDialog");
        return;
    }
    else if(stage == 2)
    {
        PlayVoiceOnPlayer(
            "RC_Johan_5.ogg", 
            "JohanNarration", 
            "36"
        );
        SetEffectVoiceOverCallback("WakeUpDialog");
        return;
    }
    else if(stage == 3)
    {
        ResetPlayerSpeed();
        SetPlayerActive(true);
    }
    else
    {
        return;
    }

    AddTimer("", delay, "WakeUpDialog");
}

void WakeUpDialog()
{
    WakeUpDialog("");
}

// ----------------------------------------------------------------------------
// Introducing the Item Quest (Should be expanded to tie into the area box by the torture room door)
// ----------------------------------------------------------------------------

void StartDialog(string a, string b, int s)
{
    QuestDialog();
}

void QuestDialog(string t)
{
    int stage = GetLocalVarInt("QuestDialog");
    AddLocalVarInt("QuestDialog", 1);
    float delay = 0.0f;

    if(stage == 0)
    {
        PlayVoiceOnPlayer(
            "RC_Johan_6.ogg", 
            "JohanNarration", 
            "37"
        );
        SetEffectVoiceOverCallback("QuestDialog");
        return;
    }
    else if(stage == 1)
    {
        PlayVoiceOnPlayer(
            "RC_Johan_6b.ogg", 
            "JohanNarration", 
            "37b"
        );
        SetEffectVoiceOverCallback("QuestDialog");
        return;
    }
    else
    {
        return;
    }

    AddTimer("", delay, "QuestDialog");
}

void QuestDialog()
{
    QuestDialog("");
}

// ----------------------------------------------------------------------------
// PRIORY CODE AREA
// ----------------------------------------------------------------------------

void StartPriory(string a, string b, int s)
{
    PrioryDialog();
}

void PrioryDialog(string t)
{
    int stage = GetLocalVarInt("PrioryDialog");
    AddLocalVarInt("PrioryDialog", 1);
    float delay = 0.0f;

    if(stage == 0)
    {
        PlayVoiceOnPlayer(
            "RC_Johan_7.ogg", 
            "JohanNarration", 
            "38"
        );
        SetEffectVoiceOverCallback("PrioryDialog");
        return;
    }
    else
    {
        return;
    }

    AddTimer("", delay, "PrioryDialog");
}

void PrioryDialog()
{
    PrioryDialog("");
}

// ============================================================================
// COLLECTING REQUIRED ITEMS
// ============================================================================
const int requiredItemsCount = 2;

bool ItemIsRequired(string itemName)
{
    return itemName == entRisenWater ||
    itemName == entRisenSalt;
}

void OnRequiredItemPickup(string entity)
{
    // Ignore not required items
    if (!ItemIsRequired(entity)) { return; }

    if (entity == entRisenWater)        { OnWaterPickedUp(); }
    if (entity == entRisenSalt)         { OnSaltPickedUp(); }

    AddLocalVarInt("RequiredItemsPickedUp", 1);
    GiveQuestIfNotAdded("RisenQuest");

    if (AllRequiredItemsPickedUp())
    {
        OnAllItemsPickedUp();
    }
}

bool AllRequiredItemsPickedUp()
{
    return GetLocalVarInt("RequiredItemsPickedUp") == requiredItemsCount;
}

// ============================================================================
// REQUIRED ITEMS PICK UP EVENTS
// ============================================================================

void OnWaterPickedUp()
{
        PlayVoiceOnPlayer(
            "RC_Johan_10.ogg", 
            "JohanNarration", 
            "41"
        );
}

void OnSaltPickedUp()
{
        PlayVoiceOnPlayer(
            "RC_Johan_12.ogg", 
            "JohanNarration", 
            "43"
        );
}

void OnAllItemsPickedUp()
{
    CompleteQuest("RisenQuest");
    AddSinglePlayerCollideCallback("EndingCutsceneTrigger", "StartEnding");
}

void StartEnding(string a, string b, int s)
{
    EndingDialog();
    SetPlayerActive(false);
    StartPlayerLookAt("LookAtDoor", 0.8f, 1.5f, "");
    SetSwingDoorLocked("BlowOpenDoor1", false, true);
}

void EndingDialog(string t)
{
    int stage = GetLocalVarInt("EndingDialog");
    AddLocalVarInt("EndingDialog", 1);
    float delay = 0.0f;

    if(stage == 0)
    {
        PlayVoiceOnPlayer(
            "RC_Johan_13.ogg", 
            "JohanNarration", 
            "44"
        );
        SetEffectVoiceOverCallback("EndingDialog");
        return;
    }
    else if(stage == 1)
    {
        PlayVoiceOnPlayer(
            "RC_Anton_5.ogg", 
            "AntonNarration", 
            "12"
        );
        SetEffectVoiceOverCallback("EndingDialog");
        return;
    }
    else if(stage == 2)
    {
        delay = 1.0f;
    }
    else if(stage == 3)
    {
        PlayVoiceOnPlayer(
            "RC_Anton_6.ogg", 
            "AntonNarration", 
            "12b"
        );
        SetEffectVoiceOverCallback("EndingDialog");
        return;
    }
    else if(stage == 4)
    {
        delay = 1.0f;
        ///PRISONER DIALOG HERE
    }
    else if(stage == 5)
    {
        PlayVoiceOnPlayer(
            "RC_Anton_7.ogg", 
            "AntonNarration", 
            "13"
        );
        SetEffectVoiceOverCallback("EndingDialog");
        return;
    }
    else if(stage == 5)
    {
        ///SOUNDS OF CRASHING RUBBLE IN DISTANCE, ECHOING LAUGHTER
        delay = 1.0f;
    }
    else if(stage == 6)
    {
        StopPlayerLookAt();
        SetPlayerActive(true);
    }
    else
    {
        return;
    }

    AddTimer("", delay, "EndingDialog");
}

void EndingDialog()
{
    EndingDialog("");
}


// ============================================================================
// LEFT HAND PATH HORROR AREAS
// ============================================================================

void StartHorror(string a, string b, int s)
{
    PlayVoiceOnPlayerAndSlowdown("RC_Johan_11.ogg");
}