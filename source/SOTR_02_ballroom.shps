#include "Ramlord.ihps"

// ============================================================================
// MAIN
// ============================================================================
const string MapId = "02";

void OnStart()
{
    RegisterCallbacks();
    PlayVoiceOnPlayerAndSlowdown("BA_Johan_1.ogg");
}

void OnEnter()
{
    FadeOut(0.0f);
    AddTimer("", 0.25f, "FadeInTimer");
    StartAmbience("ambience_swoop_myst.snt");
    AmbienceLoop("");
    SetupSkybox("SOTR_night_sky_light.dds");
}

void RegisterCallbacks()
{
    AddUseItemCallback(
        "LibraryKey",
        "LibraryDoor",
        "UnlockLibraryDoor"
    );

    AddSinglePlayerCollideCallback(
        "TightCorridorFallArea", 
        "OnLibraryEscaped"
    );
    AddSinglePlayerCollideCallback(
        "InRitualRoomArea", 
        "RecoverFall"
    );
    AddSinglePlayerCollideCallback(
        "BAJohanVoice_1", 
        "BAJohanLineThree"
    );
}

// ============================================================================
// RANDOM AMBIENT SOUNDS
// ============================================================================
const int soundAreaCount = 12;

string GetRandomAmbSound()
{
    // Note(Peter): Rand is inclusive
    // on both sides, unlike in C#.
    switch(RandInt(0, 5))
    {
        case 0: return "scare_animal_squeal.snt";
        case 1: return "scare_slam_door.snt";
        case 2: return "scare_steps_big.snt";
        case 3: return "scare_walk_ghost.snt";
        case 4: return "scare_wood_creak_scuf.snt";
        case 5: return "scare_wood_creak_walk.snt";
    }

    return "";
}

string GetRandomSoundArea()
{
    return "AmbSoundArea_" + RandInt(1, soundAreaCount);
}

void AmbienceLoop(string t)
{
    if(GetLocalVarInt("StopAmbience") == 1) return;

    string sound = GetRandomAmbSound();
    string area = GetRandomSoundArea();

    PlaySoundAtEntity("", sound, area, 0.0f, false);

    AddTimer("", RandFloat(10.0f, 30.0f), "AmbienceLoop");
}

void StopAmbientSounds(string t)
{
    SetLocalVarInt("StopAmbience", 1);
}

void ContinueAmbientSounds(string t)
{
    SetLocalVarInt("StopAmbience", 0);
    AddTimer("", RandFloat(2.0f, 7.0f), "AmbienceLoop");
}

// ============================================================================
// CORRIDOR BACKTRACK SEQUENCE
// ============================================================================
const float boxlightR = 0.0f;
const float boxlightG = 0.032f;
const float boxlightB = 0.068f;

void TurnOffCorridorLamps()
{
    SetLampLit("LampToKill_1", false, true);
    SetLampLit("LampToKill_2", false, true);
    SetLampLit("LampToKill_3", false, true);
    SetLampLit("LampToKill_4", false, true);
    SetLampLit("LampToKill_5", false, true);
    SetLampLit("LampToKill_6", false, true);
    SetLampLit("LampToKill_7", false, true);
    SetLampLit("LampToKill_8", false, true);
    SetLampLit("LampToKill_9", false, true);
}

void FadeOutCorridorLights(float timeInSeconds)
{
    FadeLightTo("LightToKill_1", 0.0f, 0.0f, 0.0f, 0.0f, -1.0f, timeInSeconds);
    FadeLightTo("LightToKill_2", 0.0f, 0.0f, 0.0f, 0.0f, -1.0f, timeInSeconds);
    FadeLightTo("LightToKill_3", 0.0f, 0.0f, 0.0f, 0.0f, -1.0f, timeInSeconds);
    FadeLightTo("LightToKill_4", 0.0f, 0.0f, 0.0f, 0.0f, -1.0f, timeInSeconds);
    FadeLightTo("LightToKill_5", 0.0f, 0.0f, 0.0f, 0.0f, -1.0f, timeInSeconds);
    FadeLightTo("LightToKill_6", 0.0f, 0.0f, 0.0f, 0.0f, -1.0f, timeInSeconds);
    FadeLightTo("LightToKill_7", 0.0f, 0.0f, 0.0f, 0.0f, -1.0f, timeInSeconds);
}

void OnRitualKeyPickup(string entity)
{
    AddSinglePlayerCollideCallback(
        "SilentCorridorStartArea", 
        "SilentCorridorStart"
    );
    AddSinglePlayerCollideCallback(
        "SilentCorridorEndArea", 
        "SilentCorridorEnd"
    );
    FadeOutCorridorLights(0.5f);
    TurnOffCorridorLamps();
    AddTimer("", 1.5f, "DelayedDoorSlam");
}

void DelayedDoorSlam(string t)
{
    SetSwingDoorClosed("mansion_4", true, true);
    PlaySoundAtEntity("scare_slam_door.snt", "mansion_4");
    SetEntityActive("ScareArmor1", true);
    SetEntityActive("ScareArmor2", false);
    GiveSanityDamage(1.0f, true);
}

void SilentCorridorStart(string a, string b, int state)
{
    StopAmbientSounds("");
    StopAmbience(0.5f);
    SetPlayerRunSpeedMul(0.0f);
    SetPlayerMoveSpeedMul(0.6f);
    SetPlayerCrouchDisabled(true);
    SetPlayerCrouching(false);
    SetInventoryDisabled(true);
    PlaySoundAtEntity("creepySound", "SOTR_skeletalk.snt", "SkeletalkTarget");
    FadeLightTo("BoxLight_1", 0.005f, 0.005f, 0.02f, 1.0f, -1.0f, 0.5f);
}

void SilentCorridorEnd(string a, string b, int state)
{
    StartAmbience("03_rock_amb.snt");
    ContinueAmbientSounds("");
    ResetPlayerState();
    FadeLightTo("BoxLight_1", boxlightR, boxlightG, boxlightB, 1.0f, -1.0f, 0.5f);
}

// ============================================================================
// UNLOCKING LIBRARY DOOR
// ============================================================================
void UnlockLibraryDoor(string item, string entity)
{
    RemoveItem(item);
    SetSwingDoorLocked(
        entity, /* Entity */
        false,  /* Locked */
        true    /* Use Effects */
    );

    PlaySoundAtEntity("unlock_door.snt", entity);
}

// ============================================================================
// KEPLER NOTE
// ============================================================================
void PickUpBallroomNote(string e)
{
    PlayVoiceOnPlayerAndSlowdown("BA_Johan_6.ogg");
}

// ============================================================================
// LEVER SEQUENCE
// ============================================================================
void OnSecretLeverPulled(string entity, int state)
{
    if(state == 0) return;
    SetLeverStuckState(entity, state, true);
    SetMoveObjectState("SecretShelf", -1.0f);
    PlayVoiceOnPlayerAndSlowdown("BA_Johan_8.ogg");
}

// ============================================================================
// LADDER FALL SEQUENCE
// ============================================================================
void OnLibraryEscaped(string a, string b, int state)
{
    LibraryCrashTimer("");
}

void LibraryCrashTimer(string t)
{
    AddLocalVarInt("LibraryCrashTimer", 1);
    int stage = GetLocalVarInt("LibraryCrashTimer");
    float delay = 0.0f;

    if(stage == 1)
    {
        // 
        SetEffectVoiceOverCallback("");
        StopAllEffectVoices(0.1f);
        ChangePlayerStateToNormal();
        SetEntityActive("LadderArea", false);
        SetEntityActive("SolidLadder", false);
        SetEntityActive("BrokenLadder_1", true);
        SetEntityActive("BrokenLadder_2", true);
        PlaySoundAtEntity("break_wood.snt");
        GiveSanityDamage(1.0f, true);
        CreateParticleSystemAtEntity(
            "ps_impact_dirt_low.ps", 
            "LadderEffectsArea"
        );
        StopMusic(0.5f, 1);
        SetLanternActive(false, false);
        StartPlayerLookAt("CorridorFallViewTarget", 2.0f, 3.0f, "");
        SetPlayerCrouching(false);
        delay = 0.1f;
    }
    else if(stage == 2)
    {
        RemoveItem("Lantern");
        SetEntityActive("Lantern", true);
        delay = 0.1f;
    }
    else if(stage == 3)
    {
        FadeOut(0.01f);
        GiveSanityDamage(1.0f, true);
        MovePlayerHeadPos(0.0f, -1.2f, 0.7f, 5.0f, 0.5f);
        FadePlayerRollTo(-30.0f, 100.0f, 120.0f);
        FadeRadialBlurTo(0.02f, 5.0f);
        SetPlayerActive(false);
        delay = 0.01f;
    }
    else if(stage == 4)
    {
        FadeIn(0.5f);
        AddPropForce("Lantern", 0.0f, 1000.0f, -8500.0f, "world");
        delay = 0.2f;
    }
    else if(stage == 5)
    {
        FadeRadialBlurTo(0.0f, 0.5f);
        delay = 0.8f;
    }
    else if(stage == 6)
    {
        PlaySoundAtEntity("react_sigh.snt");
        MovePlayerHeadPos(0.0f, -1.5f, 0.7f, 1.0f, 0.5f);
        FadePlayerRollTo(-40.0f, 5.0f, 6.0f);
        delay = 0.4f;
    }
    else if(stage == 6)
    {
        PlaySoundAtEntity("react_sigh.snt");
        delay = 1.5f;
    }
    else if(stage == 7)
    {
        PlaySoundAtEntity("insanity_whisper.snt");
        delay = 2.2f;
    }
    else if(stage == 8)
    {
        FadeOut(0.5f);
        FadeGlobalSoundVolume(0.0f, 0.5f);
        StopAmbience(0.5f);
        PlayVoice("BA_Johan_7.ogg");
        delay = 10.0f;
    }
    else if(stage == 9)
    {
        PlaySoundAtEntity("react_scare.snt");
        FadeIn(0.1f);
        FadeGlobalSoundVolume(1.0f, 0.1f);
        StartAmbience("03_rock_amb.snt");
        FadeRadialBlurTo(0.01f, 1.0f);
        ResetPlayerSpeed();
        delay = 0.5f;
    }
    else if(stage == 10)
    {
        PlayMusic("00_event_hallway.ogg", false, 1.0f, 0.0f, 1, false);
        delay = 4.0f;
    }
    else if(stage == 11)
    {
        PlaySoundAtEntity("react_sigh.snt");
        MovePlayerHeadPos(0.0f, 0.0f, 0.0f, 2.0f, 0.5f);
        FadePlayerRollTo(0.0f, 40.0f, 60.0f);
        SetPlayerCrouching(true);
        delay = 1.5f;
    }
    else if(stage == 12)
    {
        ResetPlayerState();
    }
    else
    {
        return;
    }

    AddTimer("", delay, "LibraryCrashTimer");
}

void RecoverFall(string a, string b, int state)
{
    ResetPlayerSpeed();
    SetEntityActive("PonrBlockBox", true);
    CloseSlidingDoorsTimer("");
}

void CloseSlidingDoorsTimer(string t)
{
    AddLocalVarInt("CloseSlidingDoorsTimer", 1);
    int stage = GetLocalVarInt("CloseSlidingDoorsTimer");
    float delay = 0.0f;

    if(stage > 0 && stage <= 5)
    {
        SetMoveObjectState("SlideDoor_" + stage, 0.0f);
        delay = 0.6f;
    }
    else if(stage == 6)
    {
        delay = 5.0f;
    }
    else if(stage == 7)
    {
        PlayVoiceOnPlayerAndSlowdown("BA_Johan_9.ogg");
    }
    else
    {
        return;
    }

    AddTimer("", delay, "CloseSlidingDoorsTimer");
}

// ============================================================================
// Thight Corridor Door Event
// ============================================================================
void OnLanternPickedUp(string entity)
{
    TightCorridorDoorsTimer("");
}

void TightCorridorDoorsTimer(string t)
{
    AddLocalVarInt("TightCorridorDoorsTimer", 1);
    int stage = GetLocalVarInt("TightCorridorDoorsTimer");
    float delay = 0.0f;

    if(stage > 0 && stage <= 5)
    {
        SetMoveObjectState("SlideDoor_" + stage, 1.0f);
        delay = 0.6f;
    }
    else
    {
        return;
    }

    AddTimer("", delay, "TightCorridorDoorsTimer");
}

// ============================================================================
// VOICE LINES
// ============================================================================
void BAJohanLineThree(string a, string b, int s)
{
    PlayVoiceOnPlayerAndSlowdown("BA_Johan_3.ogg");
}

void BAJohanLineFour(string s)
{
    PlayVoiceOnPlayerAndSlowdown("BA_Johan_4.ogg");
}

// ============================================================================
// DOOR USE ITEM MESSAGES
// ============================================================================
const string entLibraryDoor = "LibraryDoor";

void OnDoorInteract(string entity)
{
    OnDoorInteractMessage(entity);
}

void OnDoorInteractMessage(string entity)
{
    bool locked = GetSwingDoorLocked(entity);

    if(entity == entLibraryDoor)
    {
        OnLibraryDoorInteract(locked);
    }
    else if(locked)
    {
        DisplaySeededDoorMessage("Generic_", 1, 3);
    }
}

void DisplaySeededDoorMessage(string entryBase, int min, int max)
{
    int seed = RandInt(min, max);
    SetMessage("DoorMessages", entryBase + seed, 0.0f);
}

void OnLibraryDoorInteract(bool isLocked)
{
    if(!isLocked) { return; }

    if(HasItem("LibraryKey"))
    {
        SetMessage("DoorMessages", "HasKey", 0.0f);
    }
    else
    {
        if(GetLocalVarInt("CommentedOnLibraryDoor") == 0)
        {
            PlayVoiceOnPlayerAndSlowdown("BA_Johan_5.ogg");
            SetLocalVarInt("CommentedOnLibraryDoor", 1);
        }
        else
        {
            DisplaySeededDoorMessage("Generic_Locked_", 1, 3);
        }
    }
}
