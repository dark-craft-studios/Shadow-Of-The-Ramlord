#include "AmnesiaSignatures.cpp"
#include "AmnesiaExtensions.ihps"
#include "Utilities.ihps"
#include "ResetPlayerStateOnStart.ihps"
#include "EveryMapEvents_AUTORUN.ihps"
#include "ForceEssentialItems_AUTORUN.ihps"

// ============================================================================
// MAIN
// ============================================================================
void OnStart()
{
    RegisterCallbacks();
    PlayVoiceOnPlayerAndSlowdown("BA_Johan_1.ogg", "JohanNarration", "12");
}

void OnEnter()
{
    GetGlobalLoadingScreen("02");
    FadeOut(0.0f);
    AddTimer("", 0.25f, "FadeInTimer");
    StartAmbience("ambience_swoop_myst.snt");
    AmbienceLoop("");
    SetupSkybox("SOTR_night_sky_light.dds");
}

void OnLeave()
{
    StopAmbience(5.0f);
}

void RegisterCallbacks()
{
    UseItemParams params = UseItemParams();
    params.item = "LibraryKey";
    params.entity = "LibraryDoor";
    params.callbackFunc = "UnlockLibraryDoor";
    params.autoDestroy = true;
    AddUseKeyOnDoor(params);

    AddSinglePlayerCollideCallback(
        "TightCorridorFallArea", 
        "OnLibraryEscaped"
    );
    AddSinglePlayerCollideCallback(
        "InRitualRoomArea", 
        "RecoverFall"
    );

    AddSinglePlayerCollideCallback("BAJohanVoice_1", "BAJohanLineThree");
    AddSinglePlayerCollideCallback("BAEndingVoice", "JohanLineTwo");
    AddSinglePlayerCollideCallback("LibraryVoiceArea", "JohanLineOne");
}

// ============================================================================
// RANDOM AMBIENT SOUNDS
// ============================================================================
const int soundAreaCount = 12;

const string[] ambSounds =
{
    "scare_animal_squeal.snt",
    "scare_slam_door.snt",
    "scare_steps_big.snt",
    "scare_walk_ghost.snt",
    "scare_wood_creak_scuf.snt",
    "scare_wood_creak_walk.snt"
};

void AmbienceLoop(string t)
{
    if(GetLocalVarInt("StopAmbience") == 1) return;

    string sound = ambSounds[RandInt(0, ambSounds.length() - 1)];
    string area = "AmbSoundArea_" + RandInt(0, soundAreaCount);

    PlaySoundAtEntity("", sound, area, 0.0f, false);

    AddTimer("", RandFloat(10.0f, 30.0f), "AmbienceLoop");
}

void StopAmbientSounds(string t)
{
    SetLocalVarInt("StopAmbience", 1);
}

void ContinueAmbientSounds(string t)
{
    SetLocalVarInt("StopAmbience", 0);
    AddTimer("", RandFloat(2.0f, 7.0f), "AmbienceLoop");
}

// ============================================================================
// CORRIDOR BACKTRACK SEQUENCE
// ============================================================================
const float boxlightR = 0.0f;
const float boxlightG = 0.032f;
const float boxlightB = 0.068f;

const string[] CorridorCandles = {
    "candlestick_wall_orange_8",
    "candlestick_wall_orange_9",
    "candlestick01_13",
    "candlestick01_14",
    "candle_floor_small_13",
    "candle_floor_small_14",
    "candle_floor_small_15",
    "candle_floor_small_8",
    "candle_floor_small_9",
    "candle_floor_small_7",
    "candle_floor_small_5",
    "candle_floor_small_6",
    "candle_floor_small_4",
    "candle_floor_small_10",
    "candle_floor_small_11",
    "candle_floor_small_12",
    "candle_floor_small_20",
    "candle_floor_small_16",
    "candle_floor_small_17",
    "candle_floor_small_19",
    "candle_floor_small_18",
    "candlestick_tri_1",
    "chandelier_simple_short_4"
};

const string[] CorridorPointLights = {
    "PointLight_5",
    "PointLight_19",
    "PointLight_20"
};

void OnRitualKeyPickup(string entity)
{
    AddSinglePlayerCollideCallback("SilentCorridorStartArea", "SilentCorridorStart");
    AddSinglePlayerCollideCallback("SilentCorridorEndArea", "SilentCorridorEnd");

    for(uint i = 0; i < CorridorCandles.length(); i++)
    {
        SetLampLit(CorridorCandles[i], false, true);
    }

    for(uint i = 0; i < CorridorPointLights.length(); i++)
    {
        FadeLightTo(CorridorPointLights[i], 0.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.5f);
    }

    AddTimer("", 1.5f, "DelayedDoorSlam");
}

void DelayedDoorSlam(string t)
{
    SetSwingDoorClosed("mansion_4", true, true);
    PlaySoundAtEntity("scare_slam_door.snt", "mansion_4");
    SetEntityActive("ScareArmor1", true);
    SetEntityActive("ScareArmor2", false);
    GiveSanityDamage(1.0f, true);
}

void SilentCorridorStart(string a, string b, int state)
{
    StopAmbientSounds("");
    StopAmbience(0.5f);
    SetPlayerRunSpeedMul(0.0f);
    SetPlayerMoveSpeedMul(0.6f);
    SetPlayerCrouchDisabled(true);
    SetPlayerCrouching(false);
    SetInventoryDisabled(true);
    PlaySoundAtEntity("skeletalk", "SOTR_skeletalk.snt", "SkeletalkTarget");
    FadeLightTo("BoxLight_1", 0.005f, 0.005f, 0.02f, 1.0f, -1.0f, 0.5f);
    FadeLightTo("BoxLight_2", 0.005f, 0.005f, 0.02f, 1.0f, -1.0f, 0.5f);
}

void SilentCorridorEnd(string a, string b, int state)
{
    StopSound("skeletalk", 0.5f);
    StartAmbience("03_rock_amb.snt");
    ContinueAmbientSounds("");
    ResetPlayerState();
    FadeLightTo("BoxLight_1", boxlightR, boxlightG, boxlightB, 1.0f, -1.0f, 0.5f);
}

// ============================================================================
// UNLOCKING LIBRARY DOOR
// ============================================================================
void UnlockLibraryDoor(string item, string entity)
{
    RemoveItem(item);
    SetSwingDoorLocked(
        entity, /* Entity */
        false,  /* Locked */
        true    /* Use Effects */
    );

    PlaySoundAtEntity("unlock_door.snt", entity);
}

// ============================================================================
// LEVER SEQUENCE
// ============================================================================
void OnSecretLeverPulled(string entity, int state)
{
    if(state == 0) return;
    SetLeverStuckState(entity, state, true);
    SetMoveObjectState("SecretShelf", -1.0f);
    PlayVoiceOnPlayerAndSlowdown("BA_Johan_8.ogg", "JohanNarration", "21");
}

// ============================================================================
// LADDER FALL SEQUENCE
// ============================================================================
void OnLibraryEscaped(string a, string b, int state)
{
    LibraryCrashTimer("");
}

void LibraryCrashTimer(string t)
{
    AddLocalVarInt("LibraryCrashTimer", 1);
    int stage = GetLocalVarInt("LibraryCrashTimer");
    float delay = 0.0f;

    if(stage == 1)
    {
        ChangePlayerStateToNormal();
        SetEntityActive("LadderArea", false);
        SetEntityActive("SolidLadder", false);
        SetEntityActive("BrokenLadder_1", true);
        SetEntityActive("BrokenLadder_2", true);
        PlaySoundAtEntity("break_wood.snt");
        GiveSanityDamage(1.0f, true);
        CreateParticleSystemAtEntity("ps_impact_dirt_low.ps", "LadderEffectsArea");
        SetPlayerActive(false);
        StopAllEffectVoices(0.1);
        StopMusic(0.5f, 1);
        SetLanternActive(false, true);
        StartPlayerLookAt("CorridorFallViewTarget", 2.0f, 3.0f, "");
        SetPlayerCrouching(false);
        delay = 0.1f;
    }
    else if(stage == 2)
    {
        RemoveItem("Lantern");
        SetEntityActive("Lantern", true);
        PlayVoiceOnPlayerAndSlowdown("BA_Johan_7.ogg", "JohanNarration", "18");
        delay = 0.1f;
    }
    else if(stage == 3)
    {
        FadeOut(0.01f);
        GiveSanityDamage(1.0f, true);
        MovePlayerHeadPos(0.0f, -1.2f, 0.7f, 5.0f, 0.5f);
        FadePlayerRollTo(-30.0f, 100.0f, 120.0f);
        FadeRadialBlurTo(0.02f, 5.0f);
        delay = 0.01f;
    }
    else if(stage == 4)
    {
        FadeIn(0.5f);
        AddPropForce("Lantern", 0.0f, 1000.0f, -8500.0f, "world");
        delay = 0.2f;
    }
    else if(stage == 5)
    {
        FadeRadialBlurTo(0.0f, 0.5f);
        delay = 0.8f;
    }
    else if(stage == 6)
    {
        PlaySoundAtEntity("react_sigh.snt");
        MovePlayerHeadPos(0.0f, -1.5f, 0.7f, 1.0f, 0.5f);
        FadePlayerRollTo(-40.0f, 5.0f, 6.0f);
        delay = 0.4f;
    }
    else if(stage == 6)
    {
        PlaySoundAtEntity("react_sigh.snt");
        delay = 1.5f;
    }
    else if(stage == 7)
    {
        PlaySoundAtEntity("insanity_whisper.snt");
        delay = 2.2f;
    }
    else if(stage == 8)
    {
        FadeOut(0.5f);
        FadeGlobalSoundVolume(0.0f, 0.5f);
        StopAmbience(0.5f);
        delay = 10.0f;
    }
    else if(stage == 9)
    {
        PlaySoundAtEntity("react_scare.snt");
        FadeIn(0.1f);
        FadeGlobalSoundVolume(1.0f, 0.1f);
        StartAmbience("03_rock_amb.snt");
        FadeRadialBlurTo(0.01f, 1.0f);
        ResetPlayerSpeed();
        delay = 0.5f;
    }
    else if(stage == 10)
    {
        PlayMusic("00_event_hallway.ogg", false, 1.0f, 0.0f, 1, false);
        delay = 4.0f;
    }
    else if(stage == 11)
    {
        PlaySoundAtEntity("react_sigh.snt");
        MovePlayerHeadPos(0.0f, 0.0f, 0.0f, 2.0f, 0.5f);
        FadePlayerRollTo(0.0f, 40.0f, 60.0f);
        SetPlayerCrouching(true);
        delay = 1.5f;
    }
    else if(stage == 12)
    {
        StopPlayerLookAt();
        SetPlayerActive(true);
    }
    else
    {
        return;
    }

    AddTimer("", delay, "LibraryCrashTimer");
}

void RecoverFall(string a, string b, int state)
{
    ResetPlayerSpeed();
    SetEntityActive("PonrBlockBox", true);
    CloseSlidingDoorsTimer("");
}

void CloseSlidingDoorsTimer(string t)
{
    AddLocalVarInt("CloseSlidingDoorsTimer", 1);
    int stage = GetLocalVarInt("CloseSlidingDoorsTimer");
    float delay = 0.0f;

    if(stage == 1)
    {
        SetMoveObjectState("SlideDoor_1", 0.0f);
        delay = slideDoorOpenDelay;
    }
    else if(stage == 2)
    {
        SetMoveObjectState("SlideDoor_2", 0.0f);
        delay = slideDoorOpenDelay;
    }
    else if(stage == 3)
    {
        SetMoveObjectState("SlideDoor_3", 0.0f);
        delay = slideDoorOpenDelay;
    }
    else if(stage == 4)
    {
        SetMoveObjectState("SlideDoor_4", 0.0f);
        delay = slideDoorOpenDelay;
    }
    else if(stage == 5)
    {
        SetMoveObjectState("SlideDoor_5", 0.0f);
    }
    else
    {
        return;
    }

    AddTimer("", delay, "CloseSlidingDoorsTimer");
}

// ============================================================================
// Thight Corridor Door Event
// ============================================================================
void OnLanternPickedUp(string entity)
{
    TightCorridorDoorsTimer("");
}

const float slideDoorOpenDelay = 0.6f;

void TightCorridorDoorsTimer(string t)
{
    AddLocalVarInt("TightCorridorDoorsTimer", 1);
    int stage = GetLocalVarInt("TightCorridorDoorsTimer");
    float delay = 0.0f;

    if(stage == 1)
    {
        SetMoveObjectState("SlideDoor_1", 1.0f);
        delay = slideDoorOpenDelay;
    }
    else if(stage == 2)
    {
        SetMoveObjectState("SlideDoor_2", 1.0f);
        delay = slideDoorOpenDelay;
    }
    else if(stage == 3)
    {
        SetMoveObjectState("SlideDoor_3", 1.0f);
        delay = slideDoorOpenDelay;
    }
    else if(stage == 4)
    {
        SetMoveObjectState("SlideDoor_4", 1.0f);
        delay = slideDoorOpenDelay;
    }
    else if(stage == 5)
    {
        SetMoveObjectState("SlideDoor_5", 1.0f);
    }
    else
    {
        return;
    }

    AddTimer("", delay, "TightCorridorDoorsTimer");
}

// ============================================================================
// VOICE LINES
// ============================================================================
void BAJohanLineThree(string &in asParent, string &in asChild, int alState)
{
    PlayVoiceOnPlayerAndSlowdown("BA_Johan_3.ogg", "JohanNarration", "14");
}

void BAJohanLineFour(string &in entity)
{
    PlayVoiceOnPlayerAndSlowdown("BA_Johan_4.ogg", "JohanNarration", "15");
}

void JohanLineOne(string &in asParent, string &in asChild, int alState)
{
    PlayVoiceOnPlayerAndSlowdown("BA_Johan_6.ogg", "JohanNarration", "17");
}

void JohanLineTwo(string &in asParent, string &in asChild, int alState)
{
    PlayVoiceOnPlayerAndSlowdown("BA_Johan_9.ogg", "JohanNarration", "22");
}

// ============================================================================
// DOOR USE ITEM MESSAGES
// ============================================================================
const string[] allDoors =
{
    "mansion_1",
    "mansion_2",
    "mansion_4",
    "mansion_5",
    "CorridorDoor",
    "level_wood_1",
    "level_wood_2",
    "LibraryDoor"
};

const string[] unlockableDoors =
{
    "LibraryDoor"
};

void AddUseKeyOnDoor(UseItemParams params)
{
    string correctDoor = params.entity;
    string correctCallback = params.callbackFunc;

    for(uint i = 0; i < allDoors.length(); i++)
    {
        params.entity = allDoors[i];

        if(allDoors[i] == correctDoor)
        {
            params.callbackFunc = correctCallback;
            params.autoDestroy = true;
        }
        else
        {
            params.callbackFunc = "IncorrectDoorMessage";
            params.autoDestroy = false;
        }

        AddUseItemCallback(params);
    }
}

void IncorrectDoorMessage(string item, string doorEntity)
{
    int seed = RandInt(1, 3);
    SetMessage("DoorMessages", "KeyWrongDoor_" + seed, 0.0f);
}

void OnDoorInteract(string entity)
{
    OnDoorInteractMessage(entity);
}

void DisplaySeededDoorMessage(string entryBase, int min, int max)
{
    int seed = RandInt(min, max);
    SetMessage("DoorMessages", entryBase + seed, 0.0f);
}

void OnDoorInteractMessage(string entity)
{
    bool locked = GetSwingDoorLocked(entity);

    if(locked && entity == "LibraryDoor" && HasItem("LibraryKey"))
    {
        SetMessage("DoorMessages", "HasKey", 0.0f);
    }
    else if(locked && entity == "LibraryDoor" && 
        !HasItem("LibraryKey") && 
        GetLocalVarInt("CommentedOnLibraryDoor") == 0)
    {
        PlayVoiceOnPlayerAndSlowdown("BA_Johan_5.ogg", "JohanNarration", "16");
        SetLocalVarInt("CommentedOnLibraryDoor", 1);
    }
    else if(locked && StringIsInArray(entity, unlockableDoors))
    {
        DisplaySeededDoorMessage("Generic_Locked_", 1, 3);
    }
    else if(locked)
    {
        DisplaySeededDoorMessage("Generic_", 1, 3);
    }
}
