#include "Ramlord.ihps"
#include "00_Introduction_StormLightSystem.ihps"
#include "00_Introduction_Cutscene.ihps"

// ============================================================================
// DEBUG CONSTANTS
// Constants used for easier debugging and quicker testing while developing
// these constants must be all false when releasing!
// ============================================================================
const bool dbgSkipIntro = false;

// ============================================================================
// USED ENTITIES
// Constants representing entities referenced inside this script
// in order to prevent misspelling and allow for easier renaming.
// - For consistency use an "ent" prefix.
// ============================================================================
const string entExitLevelDoor       = "AlbertDoor";
const string entProtagonistRoomDoor = "mansion_1";
const string entLantern             = "Lantern";
const string entFirstNote           = "note_generic_1";
const string entClearsightBook      = "SOTR_Clearsight_1";
const string entClosetDoor          = "ClosetDoor";
const string entClosetKey           = "ClosetKey";

// ============================================================================
// USED SOUNDS
// Constants representing sound files references inside this script
// in order to prevent misspelling and allow for easier renaming.
// - For consistency use an "snt" prefix.
// ============================================================================
const string sntAmbience    = "ambience_hollow_tinker.snt";
const string sntDoorUnlock  = "unlock_door.snt";
const string sntWhisper     = "insanity_whisper.snt";
const string sntLevelDoor   = "door_level_wood_open.snt";
const string sntBrokenPhono = "SOTR_broken_phono.snt";

// ============================================================================
// OTHER REQUIRED CONSTANTS
// Constants that are required either by some part of this script or another
// included source file.
// ============================================================================
const string MapId = "00";

// ============================================================================
// MAIN
// ============================================================================
void OnStart()
{
    RegisterCallbacks();

    // <DEBUG>
    if (dbgSkipIntro || ScriptDebugOn())
    {
        AddTimer("", 0.5f, "OnSkipIntro");

        // Stage 10 is the last one in the
        // introduction timer switch
        SetLocalVarInt("IntroductionCutscene", 10);
    }
    // </DEBUG>

    IntroductionCutscene("");
}

// Called from Cutscene
void OnIntroFinished(string t)
{
    StartAmbience(sntAmbience);
    SetPlayerLampOil(0.0f);
    SetPlayerMoveSpeedMul(0.75f);
    SetPropStaticPhysics(entProtagonistRoomDoor, true);
}

// <DEBUG>
void OnSkipIntro(string t)
{
    TeleportPlayer(areaHouseStart); // Area defined in Cutscene.ihps
}
// </DEBUG>

// ============================================================================
// CALLBACK REGISTRATION
// ============================================================================
void RegisterCallbacks()
{
    AddUseItemCallback(entClosetKey, entClosetDoor, "UseKeyOnCloset");
}

// ============================================================================
// CALLBACK DEFINITIONS
// ============================================================================
void UseKeyOnCloset(string key, string door)
{
    SetSwingDoorLocked(door, false, true);
    PlaySoundAtEntity(sntDoorUnlock, door);
    RemoveItem(key);
}

void OnExitDoorInteract(string entity)
{
    if(!AllRequiredItemsPickedUp()) 
    {
        SetMessage("DoorMessages", "IntroductionCannotLeave", 0.0f);
        return;
    }

    NextMapOrWaitForVoiceover();
}

void NextMapOrWaitForVoiceover()
{
    if(GetLocalVarInt("LanternMonologueEnded") == 1)
    {
        GoToNextMap();
    }
    else
    {
        SetPlayerActive(false);
        FadeOut(2.0f);
        SetLocalVarInt("NextMapAfterMonologue", 1);
    }
}

// ============================================================================
// COLLECTING REQUIRED ITEMS
// ============================================================================
const int requiredItemsCount = 3;

bool ItemIsRequired(string itemName)
{
    return itemName == entFirstNote ||
    itemName == entLantern ||
    itemName == entClearsightBook;
}

void OnRequiredItemPickup(string entity)
{
    // Ignore not required items
    if (!ItemIsRequired(entity)) { return; }

    if (entity == entLantern)        { OnLanternPickedUp(); }
    if (entity == entFirstNote)      { OnFirstNotePickedUp(); }
    if (entity == entClearsightBook) { OnClearsightPickedUp(); }

    AddLocalVarInt("RequiredItemsPickedUp", 1);
    GiveQuestIfNotAdded("IntroPackup");

    if (AllRequiredItemsPickedUp())
    {
        OnAllItemsPickedUp();
    }
}

bool AllRequiredItemsPickedUp()
{
    return GetLocalVarInt("RequiredItemsPickedUp") == requiredItemsCount;
}

// ============================================================================
// REQUIRED ITEMS PICK UP EVENTS
// ============================================================================
void OnFirstNotePickedUp()
{
    SetSwingDoorLocked(entProtagonistRoomDoor, false, false);
    SetPropStaticPhysics(entProtagonistRoomDoor, false);
    AddTimer("", 6.0f, "INJohanLineOne");
}

void INJohanLineOne(string t)
{
    PlayVoiceOnPlayerAndSlowdown("IN_Johan_3.ogg");
}

void OnClearsightPickedUp()
{
    PlayVoiceOnPlayerAndSlowdown("IN_Johan_5.ogg");
    PlaySoundAtEntity("", sntWhisper, "Player", 0.0f, false);
}

void OnLanternPickedUp()
{
    SetPlayerLampOil(80.0f);
}

void OnAllItemsPickedUp()
{
    PlayVoiceOnPlayerAndSlowdown("IN_Johan_6.ogg");
    SetEffectVoiceOverCallback("OnLanternMonologueEnd");

    CompleteQuest("IntroPackup");
}

// ============================================================================
// DOOR MESSAGES
// ============================================================================
void OnDoorInteract(string entity)
{
    if (GetSwingDoorLocked(entity) == false) { return; }

    if (entity == entClosetDoor)
    {
        string msgEntry = HasItem(entClosetKey) ? "HasKey" : "ClosetEntrance";
        ShowDoorMessage(msgEntry);
    }
}

// ============================================================================
// LOCAL UTILITIES
// ============================================================================
void OnLanternMonologueEnd()
{
    if(GetLocalVarInt("NextMapAfterMonologue") == 1)
    {
        GoToNextMap();
        return;
    }

    SetLocalVarInt("LanternMonologueEnded", 1);
}

void GoToNextMap()
{
    ChangeMap(
        "SOTR_01_prologue.map", /* Map */
        "PlayerStartArea_1",    /* Start Area */
        sntLevelDoor,           /* Start Sound */
        ""                      /* End Sound */
    );
}

void PhonoState(string entity, int state)
{
    if(state != 1) { return; }

    PlaySoundAtEntity(sntBrokenPhono, "SOTRPhonograph");
}

