// ============================================================================
// THE SHADOW OF THE RAMLORD API
// ============================================================================
// This API abstraction layer was developed for the "The Shadow of The Ramlord"
// custom story project. Some of the API methods may not apply to your usecase.

// ============================================================================
// AUTORUN
// ============================================================================
// This section contains the injections for OnEnter, OnLeave, and OnStart
// functions of every script that includes this API
void OnEnter()
{
    AutoloadLoadingScreen();
    AutoDisplayNameSetup();
    ResetPlayerState();
    EnforceItemsIfNeeded();
}

void OnStart()
{
    // Duplicate call in order to prevent
    // vanilla Amnesia sanity effects when
    // either debugging or starting from
    // a non introduction map.
    ResetPlayerState();
    BlockAllVanillaHints();
}

void OnLeave()
{
    StopAmbience();
    ClearSavedMaps();
}

// ============================================================================
// MAP META INFORMATION
// These functions serve to automate the following features:
// - Setting up a loading screen.
// - Registering a map's name for Saving
// ============================================================================
void AutoloadLoadingScreen()
{
    string txtCat = "LoadingMessages";
    string txtEnt = MapId;
    string imgFil = "SOTR_loading_" + MapId + ".jpg";
    int    imgRnd = 1; // 1 means non random, >1 is random

    SetupLoadScreen(
        txtCat, /* Text Category */
        txtEnt, /* Text Entry */
        imgRnd, /* Random */
        imgFil  /* Image file */
    );
}

void AutoDisplayNameSetup()
{
    SetMapDisplayNameEntry(
        GetDisplayNameByMapId(MapId)
    );
}

string GetDisplayNameByMapId(string mapId)
{
    if(mapId == "00") { return "Introduction"; }
    if(mapId == "01") { return "CaeceaCourtyard"; }
    if(mapId == "02") { return "Ballroom"; }
    if(mapId == "03") { return "Overlook"; }
    if(mapId == "04") { return "Emilias"; }
    if(mapId == "05") { return "RisenChamber"; }
    return "Lucifuge";
}

// ============================================================================
// VOICE OVER AND SLOWING DOWN
// ============================================================================
void PlayVoiceOnPlayerAndSlowdown(string soundFile)
{
    SetPlayerRunSpeedMul(0.0f);
    SetPlayerMoveSpeedMul(0.55f);
    SetPlayerJumpDisabled(true);
    PlayVoice(soundFile);
    SetEffectVoiceOverCallback("ResetPlayerState");
}

void PlayVoiceOnEntityAndSlowdown(string soundFile, string entity)
{
    SetPlayerRunSpeedMul(0.0f);
    SetPlayerMoveSpeedMul(0.55f);
    SetPlayerJumpDisabled(true);
    PlayVoice(soundFile, entity);
    SetEffectVoiceOverCallback("ResetPlayerState");
}

void PlayVoice(string file)
{
    AddEffectVoice(
        file, /* Sound File */
        "",   /* Effect File */
        GetGlobalVarString(file + "_Category"),
        GetGlobalVarString(file + "_Entry"),
        false,/* Uses position */
        "",   /* Position Entity */
        0.0f, /* Minimum hearing distance */
        10.0f /* Maximum hearing distance */
    );
}

void PlayVoice(string file, string entity)
{
    AddEffectVoice(
        file,  /* Sound File */
        "",    /* Effect File */
        GetGlobalVarString(file + "_Category"),
        GetGlobalVarString(file + "_Entry"),
        true,  /* Uses position */
        entity,/* Position Entity */
        0.0f,  /* Minimum hearing distance */
        20.0f  /* Maximum hearing distance */
    );
}

// ============================================================================
// SKYBOX
// ============================================================================
void SetupSkybox(string texture)
{
    SetSkyBoxActive(true);
    SetSkyBoxTexture(texture);
    SetSkyBoxColor(
        1.0f, /* Red amount */
        1.0f, /* Green amount */
        1.0f, /* Blue amount */
        1.0f  /* Alpha amount */
    );
}

// ============================================================================
// OTHER
// ============================================================================
void FadeInTimer(string t)
{
    FadeIn(2.0f);
}

void ResetPlayerStateTimer(string t)
{
    ResetPlayerState();
}

void ResetPlayerState()
{
    ResetPlayerSpeed();
    SetPlayerJumpDisabled(false);
    SetInDarknessEffectsActive(false);
    SetSanityDrainDisabled(true);
    SetPlayerCrouchDisabled(false);
    SetPlayerJumpDisabled(false);
    SetInventoryDisabled(false);
    SetPlayerActive(true);
    StopPlayerLookAt();
    BlockAllVanillaHints();
}

void ResetPlayerSpeed()
{
    SetPlayerMoveSpeedMul(0.65f);
    SetPlayerRunSpeedMul(0.75f);
}

// ============================================================================
// UTILITIES
// ============================================================================
enum CollisionState
{
    onlyEnter = 1,
    onlyLeave = -1,
    any = 0
};

// ============================================================================
// OVERLOADS
// ============================================================================
void PlaySoundAtEntity(string name, string file, string entity)
{
    PlaySoundAtEntity(
        name, /* Sound name */
        file,   /* Sound file */
        entity, /* Entity */
        0.0f,   /* Fade time */
        false   /* Save */
    );
}

void PlaySoundAtEntity(string file, string entity, float fadeTime)
{
    PlaySoundAtEntity(
        "",       /* Sound name */
        file,     /* Sound file */
        entity,   /* Entity */
        fadeTime, /* Fade time */
        false     /* Save */
    );
}

void PlaySoundAtEntity(string name, string file, string entity, float fadeTime)
{
    PlaySoundAtEntity(
        name,     /* Sound name */
        file,     /* Sound file */
        entity,   /* Entity */
        fadeTime, /* Fade time */
        false     /* Save */
    );
}
// ----------------------------------------------------------------------------

void PlaySoundAtEntity(string file, string entity)
{
    PlaySoundAtEntity(file, entity, 0.0f);
}

void PlaySoundAtEntity(string file)
{
    PlaySoundAtEntity(file, "Player", 0.0f);
}

// ----------------------------------------------------------------------------

void PlayMusicOnce(string musicFile)
{
    PlayMusic(
        musicFile, /* File */
        false,     /* Loop */
        0.5f,      /* Volume */
        0.5f,      /* Fade In */
        1,         /* Priority */
        false      /* Resume */
    );
}

void PlayMusic(string musicFile)
{
    PlayMusic(
        musicFile, /* File */
        true,      /* Loop */
        0.7f,      /* Volume */
        0.5f,      /* Fade In */
        1,         /* Priority */
        false      /* Resume */
    );
}

// ----------------------------------------------------------------------------

void AddUseItemCallback(string item, string entity, string callback)
{
    AddUseItemCallback(
        "",       /* Name */
        item,     /* Item */
        entity,   /* Entity */
        callback, /* Callback */
        true      /* Triggers One time */
    );
}

// ----------------------------------------------------------------------------

void ChangeMap(string map)
{
    ChangeMap(map, "PlayerStartArea_1", "", "");
}

// ----------------------------------------------------------------------------

void CreateParticleSystemAtEntity(string file, string entity)
{
    CreateParticleSystemAtEntity(
        "", /* Name */ 
        file, 
        entity, 
        false /* Save */
    );
}

// ============================================================================
// ABSTRACTIONS
// ============================================================================
void GiveQuestIfNotAdded(string questName)
{
    if(QuestIsAdded(questName)) { return; }
    AddQuest(questName, questName);
}

void CompleteQuest(string questName) { CompleteQuest(questName, questName); }

// ----------------------------------------------------------------------------

void StartAmbience(string soundFile)
{
    PlaySoundAtEntity(
        "amb",     /* Sound name */
        soundFile, /* Sound file */
        "Player",  /* Entity */
        0.0f,      /* Fade time */
        false      /* Save */
    );
}

void StopAmbience() { StopSound("amb", 5.0f); }

void StopAmbience(float fadeOutSeconds) { StopSound("amb", fadeOutSeconds); }

void FadeOutMusic(float fadeOut)
{
    StopMusic(fadeOut, 1);
}

// ----------------------------------------------------------------------------

void LightLampWithEffects(string lamp)
{
    SetLampLit(lamp, true, true);
}

// ----------------------------------------------------------------------------

void AddSinglePlayerCollideCallback(string area, string callbackFunc)
{
    AddEntityCollideCallback(
        "Player",     /* Entity A */
        area,         /* Entity B */
        callbackFunc, /* Callback Function */
        true,         /* Delete after collide */
        CollisionState::onlyEnter
    );
}

// ----------------------------------------------------------------------------

void AddRepeatedPlayerCollideCallback(string area, string callbackFunc)
{
    AddEntityCollideCallback(
        "Player",     /* Entity A */
        area,         /* Entity B */
        callbackFunc, /* Callback Function */
        false,         /* Delete after collide */
        CollisionState::any
    );
}

// ----------------------------------------------------------------------------

void CreateParticleSystemAtEntityWithAlpha(string psFile, string entity, float alpha)
{
    CreateParticleSystemAtEntityExt(
        "", /* name */
        psFile,
        entity,
        false, /* save */
        1.0f, /* r */
        1.0f, /* g */
        1.0f, /* b */
        alpha,
        false, /* fade at distance */
        0.0f, /* fade min end */
        0.0f, /* fade min start */
        0.0f, /* fade max end */
        0.0f  /* fade max start */
    );
}

// ----------------------------------------------------------------------------

void AddEntitySingleCollideCallback(string a, string b, string callback)
{
    AddEntityCollideCallback(
        a,        /* Entity A */
        b,        /* Entity B */
        callback, /* Callback Function */
        true,     /* Delete after collide */
        CollisionState::onlyEnter
    );
}

// ----------------------------------------------------------------------------

void StartPlayerLookAtNormal(string entity)
{
    StartPlayerLookAt(
        entity, /* Entity */
        1.0f,   /* Multiplier */
        1.5f,   /* Max speed */
        ""      /* Callback */
    );
}

void StartPlayerLookAtFast(string entity)
{
    StartPlayerLookAt(
        entity, /* Entity */
        2.5f,   /* Multiplier */
        4.0f,   /* Max speed */
        ""      /* Callback */
    );
}

// ----------------------------------------------------------------------------

void GiveSanityDamageSmall()
{
    GiveSanityDamage(5.0f, true);
}

// ============================================================================
// DOOR MESSAGES
// ============================================================================
void ShowDoorMessage(string entry)
{
    SetMessage("DoorMessages", entry, 0.0f);
}


// ----------------------------------------------------------------------------

void BlockAllVanillaHints()
{
    BlockHint("EntityGrab");
    BlockHint("SanityAdd");
    BlockHint("LanternNoItem");
    BlockHint("LanternNoOil");
    BlockHint("LeanHint");
    BlockHint("PushHint");
    BlockHint("ThrowHint");
    BlockHint("DefaultDeath");
    BlockHint("HintHint");
    BlockHint("EntityWheel");
    BlockHint("EntityPush");
    BlockHint("EntitySlide");
    BlockHint("EntitySwingDoor");
    BlockHint("EntityLever");
    BlockHint("DarknessDecrease");
    BlockHint("SanityHit");
    BlockHint("SanityLow");
    BlockHint("PickSanityPotion");
    BlockHint("PickCoin");
    BlockHint("PickHealthPotion");
    BlockHint("PickOil");
    BlockHint("PickLantern");
    BlockHint("PickTinderbox");
    BlockHint("EnemySeen");
    BlockHint("StickyArea");
    BlockHint("HideHint");
    BlockHint("EnemyTip01");
    BlockHint("EnemyTip02");
    BlockHint("CombineHint");
    BlockHint("RunHint");
    BlockHint("QuestAdded");
    BlockHint("RecentlyReadText");
}

void EnforceItemsIfNeeded()
{
    if(MapId == "01" || MapId == "02" || MapId == "03")
    {
        EnforceEssentialItems();
    }
}

void EnforceEssentialItems()
{
    EnforceItem(
        GetGlobalVarString("ClearsightItemName"), 
        "SOTR_Clearsight.ent"
    );

    EnforceItem(
        GetGlobalVarString("LanternName"), 
        "lantern.ent"
    );
}

void EnforceItem(string itemName, string itemFile)
{
    if(!HasItem(itemName))
    {
        GiveItemFromFile(itemName, itemFile);
    }
}

void FadeLightOut(string light)
{
    FadeLightTo(light, 0.0f, 0.0f, 0.0f, 1.0f, -1.0f, 0.5f);
}

